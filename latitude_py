#ADD EMPTY COLUMN
df["column_name"] = np.nan


#CONVERT TO LOWER CASE
df['column'] = df['column'].str.lower()


#COUNT ELEMENTS IN COLUMN
df['column'].value_counts()


#COUNT ELEMENTS IN COLUMNS W/ CONDITION
len(df.groupby('col_1').apply(lambda g: pd.Series(g['col_2'].unique())))


#DATE/TIME
today = datetime.today().strftime('%Y-%m-%d')


#DELETE COLUMN
del second["column_name"]


#DROP ROWS W/ CONDITIONS
to_remove = df[df['column_name'] == 'element' ].index
df.drop(to_remove , inplace=True)


#MERGE DATAFRAMES W/ CONCAT
df = pd.concat([df_1, df_2], ignore_index=True) 


#MERGE DATAFRAMES W/ MERGE
new_df = df_1.merge(df_2, how='left', left_on="column_1", right_on="column_2")


# MERGE DICTIONARIES
dictionary = dict1 | dict2



#READ FILES
df = pd.read_excel(f"results/file_name.xlsx")
df = pd.read_csv(f"results/file_name.csv", sep=",", encoding='latin1')


#REMOVE LAST ROW
df = df.iloc[: , :-1]


#RENAME COLUMNS
df = df.rename(columns={"original_name": "new_name"})


#REPLACE W/ WHERE (AFFECTS ALL ROWS)
df["new_column"] = np.where(df["column_1"]==df["column_2"], "if_true", "if_false")


#REPLACE W/ FOR (AFFECTS SPECIFIC ROWS)
for index in df.index:
    if df.loc[index,'column_name_1']==0:
        df.loc[index,'column_name_1'] = np.nan
        df.loc[index,'column_name_2'] = "str"
        df.loc[index,'column_name_1'] = int
        
        
#REPLACE AS LOOP (runs every element of the list)
list = [element1, element2]
str = "any string with {}"

for element in list:
    x = str.format(list)


#REPLACE EXACT STR/INT
df["column_name"] = df["column_name"].replace(element_to_replace, element_to_add)


#REMOVE LEADING SPACE IN STRING COLUMN
for index in df.index:
    df.loc[index, 'col'] = df.loc[index, 'col'].lstrip(' ')


#SELECT ROWS BY INDEX
df = df.iloc[200:400]

#SELECT ROWS w/ CONDITIONS
filterinfDataframe = df[(df['column'] > 30) & (df['column'] < 33) ]


#SORT ROWS
df.sort_values(by='col1', ascending=False)


# TRANSFORM DATAFRAME TO DICTIONARY
dictionary = dict(zip(df.col_1, df.col_2))


